name: Release application

on:
  push:

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: hooga-cluster
  GKE_ZONE: asia-south1-b
  REGISTRY: asia-south1-docker.pkg.dev
  REPOSITORY: kubesub
  IMAGE: the-project-backend
  SERVICE: todo-backend
  BRANCH: ${{ github.ref_name }}

jobs:
  build-publish-deploy:
    name: Build, Publish and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # This GitHub Action authenticates to Google Cloud.(authenticates via service account) https://github.com/google-github-actions/auth
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GKE_SA_KEY }}"

      # Configures the Google Cloud SDK includes the gcloud and gsutil binaries. https://github.com/google-github-actions/setup-gcloud
      - name: "Set up Cloud SDK"
        uses: google-github-actions/setup-gcloud@v2

      - name: "Use gcloud CLI"
        run: gcloud info

      - name: "Configure Docker for Artifact Registry"
        run: gcloud auth configure-docker ${{ env.REGISTRY }}

      # Fetches details(cluster endpoint, certificate, and a token) for this specific cluster https://github.com/google-github-actions/get-gke-credentials
      - name: "Get GKE credentials"
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: "${{ env.GKE_CLUSTER }}"
          project_id: "${{ env.PROJECT_ID }}"
          location: "${{ env.GKE_ZONE }}"

      - name: "Form the image name"
        run: echo "IMAGE_TAG=$REGISTRY/$PROJECT_ID/$REPOSITORY/$IMAGE:$BRANCH-$GITHUB_SHA" >> $GITHUB_ENV

      - name: Build
        run: docker build --tag $IMAGE_TAG .

      - name: Publish
        run: docker push $IMAGE_TAG

      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v2.1.0

      - name: Deploy
        run: |-
          if [ "${GITHUB_REF#refs/heads/}" = "main" ]; then
            NAMESPACE="project"
          else
            NAMESPACE="${GITHUB_REF#refs/heads/}"
          fi
          kubectl create namespace $NAMESPACE || true
          kubectl config set-context --current --namespace=$NAMESPACE
          kustomize edit set namespace $NAMESPACE
          kustomize edit set image PROJECT/IMAGE=$IMAGE_TAG
          kustomize build . | kubectl apply -f -
          kubectl rollout status statefulset $SERVICE
          kubectl get services -o wide
